/* tslint:disable */
/* eslint-disable */
/**
 * Bcknddm API
 * API a bcknddm adatbázis tábláinak kezeléséhez. Generálva a backnddbcreate.sql alapján.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: luczialex@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Feladat,
  FeladatInput,
} from '../models/index';
import {
    FeladatFromJSON,
    FeladatToJSON,
    FeladatInputFromJSON,
    FeladatInputToJSON,
} from '../models/index';

export interface CreateTaskRequest {
    feladatInput: FeladatInput;
}

export interface DeleteTaskRequest {
    fldtId: number;
}

export interface GetTaskByIdRequest {
    fldtId: number;
}

export interface UpdateTaskRequest {
    fldtId: number;
    feladatInput: FeladatInput;
}

/**
 * 
 */
export class FeladatApi extends runtime.BaseAPI {

    /**
     * Új feladatot hoz létre a megadott adatokkal.
     * Új feladat létrehozása
     */
    async createTaskRaw(requestParameters: CreateTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Feladat>> {
        if (requestParameters['feladatInput'] == null) {
            throw new runtime.RequiredError(
                'feladatInput',
                'Required parameter "feladatInput" was null or undefined when calling createTask().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apikulcs"] = await this.configuration.apiKey("apikulcs"); // ApiKulcsAuth authentication
        }

        const response = await this.request({
            path: `/feladat`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FeladatInputToJSON(requestParameters['feladatInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeladatFromJSON(jsonValue));
    }

    /**
     * Új feladatot hoz létre a megadott adatokkal.
     * Új feladat létrehozása
     */
    async createTask(requestParameters: CreateTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Feladat> {
        const response = await this.createTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Egy feladat törlése a megadott azonosító alapján.
     * Adott feladat törlése ID alapján
     */
    async deleteTaskRaw(requestParameters: DeleteTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['fldtId'] == null) {
            throw new runtime.RequiredError(
                'fldtId',
                'Required parameter "fldtId" was null or undefined when calling deleteTask().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apikulcs"] = await this.configuration.apiKey("apikulcs"); // ApiKulcsAuth authentication
        }

        const response = await this.request({
            path: `/feladat/{fldt_id}`.replace(`{${"fldt_id"}}`, encodeURIComponent(String(requestParameters['fldtId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Egy feladat törlése a megadott azonosító alapján.
     * Adott feladat törlése ID alapján
     */
    async deleteTask(requestParameters: DeleteTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTaskRaw(requestParameters, initOverrides);
    }

    /**
     * Egy adott azonosítójú feladat részletes adatainak lekérdezése.
     * Adott feladat lekérdezése ID alapján
     */
    async getTaskByIdRaw(requestParameters: GetTaskByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Feladat>> {
        if (requestParameters['fldtId'] == null) {
            throw new runtime.RequiredError(
                'fldtId',
                'Required parameter "fldtId" was null or undefined when calling getTaskById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apikulcs"] = await this.configuration.apiKey("apikulcs"); // ApiKulcsAuth authentication
        }

        const response = await this.request({
            path: `/feladat/{fldt_id}`.replace(`{${"fldt_id"}}`, encodeURIComponent(String(requestParameters['fldtId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeladatFromJSON(jsonValue));
    }

    /**
     * Egy adott azonosítójú feladat részletes adatainak lekérdezése.
     * Adott feladat lekérdezése ID alapján
     */
    async getTaskById(requestParameters: GetTaskByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Feladat> {
        const response = await this.getTaskByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lekérdezi az összes feladatot az adatbázisból.
     * Összes feladat listázása
     */
    async listTasksRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Feladat>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apikulcs"] = await this.configuration.apiKey("apikulcs"); // ApiKulcsAuth authentication
        }

        const response = await this.request({
            path: `/feladat`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FeladatFromJSON));
    }

    /**
     * Lekérdezi az összes feladatot az adatbázisból.
     * Összes feladat listázása
     */
    async listTasks(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Feladat>> {
        const response = await this.listTasksRaw(initOverrides);
        return await response.value();
    }

    /**
     * Egy meglévő feladat adatainak frissítése a megadott értékekkel.
     * Adott feladat frissítése ID alapján
     */
    async updateTaskRaw(requestParameters: UpdateTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Feladat>> {
        if (requestParameters['fldtId'] == null) {
            throw new runtime.RequiredError(
                'fldtId',
                'Required parameter "fldtId" was null or undefined when calling updateTask().'
            );
        }

        if (requestParameters['feladatInput'] == null) {
            throw new runtime.RequiredError(
                'feladatInput',
                'Required parameter "feladatInput" was null or undefined when calling updateTask().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apikulcs"] = await this.configuration.apiKey("apikulcs"); // ApiKulcsAuth authentication
        }

        const response = await this.request({
            path: `/feladat/{fldt_id}`.replace(`{${"fldt_id"}}`, encodeURIComponent(String(requestParameters['fldtId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FeladatInputToJSON(requestParameters['feladatInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeladatFromJSON(jsonValue));
    }

    /**
     * Egy meglévő feladat adatainak frissítése a megadott értékekkel.
     * Adott feladat frissítése ID alapján
     */
    async updateTask(requestParameters: UpdateTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Feladat> {
        const response = await this.updateTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
