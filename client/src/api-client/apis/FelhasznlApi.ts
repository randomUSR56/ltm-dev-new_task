/* tslint:disable */
/* eslint-disable */
/**
 * Bcknddm API
 * API a bcknddm adatbázis tábláinak kezeléséhez. Generálva a backnddbcreate.sql alapján.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: luczialex@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Felhasznalo,
  FelhasznaloInput,
  LoginUser200Response,
  LoginUserRequest,
} from '../models/index';
import {
    FelhasznaloFromJSON,
    FelhasznaloToJSON,
    FelhasznaloInputFromJSON,
    FelhasznaloInputToJSON,
    LoginUser200ResponseFromJSON,
    LoginUser200ResponseToJSON,
    LoginUserRequestFromJSON,
    LoginUserRequestToJSON,
} from '../models/index';

export interface CreateUserRequest {
    felhasznaloInput: FelhasznaloInput;
}

export interface DeleteUserRequest {
    flhsznlId: number;
}

export interface GetUserByIdRequest {
    flhsznlId: number;
}

export interface LoginUserOperationRequest {
    loginUserRequest: LoginUserRequest;
}

export interface UpdateUserRequest {
    flhsznlId: number;
    felhasznaloInput: FelhasznaloInput;
}

/**
 * 
 */
export class FelhasznlApi extends runtime.BaseAPI {

    /**
     * Létrehoz egy új felhasználót a megadott adatokkal.
     * Új felhasználó létrehozása
     */
    async createUserRaw(requestParameters: CreateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Felhasznalo>> {
        if (requestParameters['felhasznaloInput'] == null) {
            throw new runtime.RequiredError(
                'felhasznaloInput',
                'Required parameter "felhasznaloInput" was null or undefined when calling createUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apikulcs"] = await this.configuration.apiKey("apikulcs"); // ApiKulcsAuth authentication
        }

        const response = await this.request({
            path: `/felhasznalo`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FelhasznaloInputToJSON(requestParameters['felhasznaloInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FelhasznaloFromJSON(jsonValue));
    }

    /**
     * Létrehoz egy új felhasználót a megadott adatokkal.
     * Új felhasználó létrehozása
     */
    async createUser(requestParameters: CreateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Felhasznalo> {
        const response = await this.createUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Eltávolít egy felhasználót a rendszerből a megadott azonosító alapján.
     * Adott felhasználó törlése ID alapján
     */
    async deleteUserRaw(requestParameters: DeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['flhsznlId'] == null) {
            throw new runtime.RequiredError(
                'flhsznlId',
                'Required parameter "flhsznlId" was null or undefined when calling deleteUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apikulcs"] = await this.configuration.apiKey("apikulcs"); // ApiKulcsAuth authentication
        }

        const response = await this.request({
            path: `/felhasznalo/{flhsznl_id}`.replace(`{${"flhsznl_id"}}`, encodeURIComponent(String(requestParameters['flhsznlId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Eltávolít egy felhasználót a rendszerből a megadott azonosító alapján.
     * Adott felhasználó törlése ID alapján
     */
    async deleteUser(requestParameters: DeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteUserRaw(requestParameters, initOverrides);
    }

    /**
     * Lekérdezi az összes felhasználó adatait az adatbázisból.
     * Összes felhasználó listázása
     */
    async getAllUsersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Felhasznalo>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apikulcs"] = await this.configuration.apiKey("apikulcs"); // ApiKulcsAuth authentication
        }

        const response = await this.request({
            path: `/felhasznalo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FelhasznaloFromJSON));
    }

    /**
     * Lekérdezi az összes felhasználó adatait az adatbázisból.
     * Összes felhasználó listázása
     */
    async getAllUsers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Felhasznalo>> {
        const response = await this.getAllUsersRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns details of the authenticated user via API key
     * Get current user details
     */
    async getCurrentUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Felhasznalo>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apikulcs"] = await this.configuration.apiKey("apikulcs"); // ApiKulcsAuth authentication
        }

        const response = await this.request({
            path: `/felhasznalo/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FelhasznaloFromJSON(jsonValue));
    }

    /**
     * Returns details of the authenticated user via API key
     * Get current user details
     */
    async getCurrentUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Felhasznalo> {
        const response = await this.getCurrentUserRaw(initOverrides);
        return await response.value();
    }

    /**
     * Visszaadja egy adott azonosítójú felhasználó részletes adatait.
     * Adott felhasználó lekérdezése ID alapján
     */
    async getUserByIdRaw(requestParameters: GetUserByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Felhasznalo>> {
        if (requestParameters['flhsznlId'] == null) {
            throw new runtime.RequiredError(
                'flhsznlId',
                'Required parameter "flhsznlId" was null or undefined when calling getUserById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apikulcs"] = await this.configuration.apiKey("apikulcs"); // ApiKulcsAuth authentication
        }

        const response = await this.request({
            path: `/felhasznalo/{flhsznl_id}`.replace(`{${"flhsznl_id"}}`, encodeURIComponent(String(requestParameters['flhsznlId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FelhasznaloFromJSON(jsonValue));
    }

    /**
     * Visszaadja egy adott azonosítójú felhasználó részletes adatait.
     * Adott felhasználó lekérdezése ID alapján
     */
    async getUserById(requestParameters: GetUserByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Felhasznalo> {
        const response = await this.getUserByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Bejelentkezés email és jelszó alapján. Sikeres bejelentkezés esetén visszaadja a felhasználó apikulcs-át.
     * Felhasználó bejelentkezés
     */
    async loginUserRaw(requestParameters: LoginUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginUser200Response>> {
        if (requestParameters['loginUserRequest'] == null) {
            throw new runtime.RequiredError(
                'loginUserRequest',
                'Required parameter "loginUserRequest" was null or undefined when calling loginUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginUserRequestToJSON(requestParameters['loginUserRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginUser200ResponseFromJSON(jsonValue));
    }

    /**
     * Bejelentkezés email és jelszó alapján. Sikeres bejelentkezés esetén visszaadja a felhasználó apikulcs-át.
     * Felhasználó bejelentkezés
     */
    async loginUser(requestParameters: LoginUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginUser200Response> {
        const response = await this.loginUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Invalidate the user\'s API key, logging them out.
     * Felhasználó kijelentkezés (signout)
     */
    async signOutUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apikulcs"] = await this.configuration.apiKey("apikulcs"); // ApiKulcsAuth authentication
        }

        const response = await this.request({
            path: `/felhasznalo/signout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Invalidate the user\'s API key, logging them out.
     * Felhasználó kijelentkezés (signout)
     */
    async signOutUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.signOutUserRaw(initOverrides);
    }

    /**
     * Frissíti egy meglévő felhasználó adatait a megadott értékekkel.
     * Adott felhasználó frissítése ID alapján
     */
    async updateUserRaw(requestParameters: UpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Felhasznalo>> {
        if (requestParameters['flhsznlId'] == null) {
            throw new runtime.RequiredError(
                'flhsznlId',
                'Required parameter "flhsznlId" was null or undefined when calling updateUser().'
            );
        }

        if (requestParameters['felhasznaloInput'] == null) {
            throw new runtime.RequiredError(
                'felhasznaloInput',
                'Required parameter "felhasznaloInput" was null or undefined when calling updateUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apikulcs"] = await this.configuration.apiKey("apikulcs"); // ApiKulcsAuth authentication
        }

        const response = await this.request({
            path: `/felhasznalo/{flhsznl_id}`.replace(`{${"flhsznl_id"}}`, encodeURIComponent(String(requestParameters['flhsznlId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FelhasznaloInputToJSON(requestParameters['felhasznaloInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FelhasznaloFromJSON(jsonValue));
    }

    /**
     * Frissíti egy meglévő felhasználó adatait a megadott értékekkel.
     * Adott felhasználó frissítése ID alapján
     */
    async updateUser(requestParameters: UpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Felhasznalo> {
        const response = await this.updateUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
