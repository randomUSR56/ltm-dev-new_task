/* tslint:disable */
/* eslint-disable */
/**
 * Bcknddm API
 * API a bcknddm adatbázis tábláinak kezeléséhez. Generálva a backnddbcreate.sql alapján.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: luczialex@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Fldtkep,
  FldtkepInput,
} from '../models/index';
import {
    FldtkepFromJSON,
    FldtkepToJSON,
    FldtkepInputFromJSON,
    FldtkepInputToJSON,
} from '../models/index';

export interface CreatePictureRequest {
    fldtkepInput: FldtkepInput;
}

export interface DeletePictureRequest {
    fldtkepId: number;
}

export interface GetPictureByIdRequest {
    fldtkepId: number;
}

export interface UpdatePictureRequest {
    fldtkepId: number;
    fldtkepInput: FldtkepInput;
}

/**
 * 
 */
export class KpApi extends runtime.BaseAPI {

    /**
     * Új képet tölt fel egy feladathoz base64 formátumban.
     * Új feladat kép létrehozása
     */
    async createPictureRaw(requestParameters: CreatePictureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Fldtkep>> {
        if (requestParameters['fldtkepInput'] == null) {
            throw new runtime.RequiredError(
                'fldtkepInput',
                'Required parameter "fldtkepInput" was null or undefined when calling createPicture().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apikulcs"] = await this.configuration.apiKey("apikulcs"); // ApiKulcsAuth authentication
        }

        const response = await this.request({
            path: `/fldtkep`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FldtkepInputToJSON(requestParameters['fldtkepInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FldtkepFromJSON(jsonValue));
    }

    /**
     * Új képet tölt fel egy feladathoz base64 formátumban.
     * Új feladat kép létrehozása
     */
    async createPicture(requestParameters: CreatePictureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Fldtkep> {
        const response = await this.createPictureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Egy kép törlése az azonosító alapján.
     * Adott kép törlése ID alapján
     */
    async deletePictureRaw(requestParameters: DeletePictureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['fldtkepId'] == null) {
            throw new runtime.RequiredError(
                'fldtkepId',
                'Required parameter "fldtkepId" was null or undefined when calling deletePicture().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apikulcs"] = await this.configuration.apiKey("apikulcs"); // ApiKulcsAuth authentication
        }

        const response = await this.request({
            path: `/fldtkep/{fldtkep_id}`.replace(`{${"fldtkep_id"}}`, encodeURIComponent(String(requestParameters['fldtkepId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Egy kép törlése az azonosító alapján.
     * Adott kép törlése ID alapján
     */
    async deletePicture(requestParameters: DeletePictureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePictureRaw(requestParameters, initOverrides);
    }

    /**
     * Egy adott azonosítójú kép adatainak lekérdezése.
     * Adott kép lekérdezése ID alapján
     */
    async getPictureByIdRaw(requestParameters: GetPictureByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Fldtkep>> {
        if (requestParameters['fldtkepId'] == null) {
            throw new runtime.RequiredError(
                'fldtkepId',
                'Required parameter "fldtkepId" was null or undefined when calling getPictureById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apikulcs"] = await this.configuration.apiKey("apikulcs"); // ApiKulcsAuth authentication
        }

        const response = await this.request({
            path: `/fldtkep/{fldtkep_id}`.replace(`{${"fldtkep_id"}}`, encodeURIComponent(String(requestParameters['fldtkepId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FldtkepFromJSON(jsonValue));
    }

    /**
     * Egy adott azonosítójú kép adatainak lekérdezése.
     * Adott kép lekérdezése ID alapján
     */
    async getPictureById(requestParameters: GetPictureByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Fldtkep> {
        const response = await this.getPictureByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lekérdezi az összes képet, amelyek feladatokhoz tartoznak.
     * Összes feladat kép listázása
     */
    async listPicturesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Fldtkep>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apikulcs"] = await this.configuration.apiKey("apikulcs"); // ApiKulcsAuth authentication
        }

        const response = await this.request({
            path: `/fldtkep`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FldtkepFromJSON));
    }

    /**
     * Lekérdezi az összes képet, amelyek feladatokhoz tartoznak.
     * Összes feladat kép listázása
     */
    async listPictures(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Fldtkep>> {
        const response = await this.listPicturesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Egy meglévő kép adatainak frissítése base64 formátumban.
     * Adott kép frissítése ID alapján
     */
    async updatePictureRaw(requestParameters: UpdatePictureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Fldtkep>> {
        if (requestParameters['fldtkepId'] == null) {
            throw new runtime.RequiredError(
                'fldtkepId',
                'Required parameter "fldtkepId" was null or undefined when calling updatePicture().'
            );
        }

        if (requestParameters['fldtkepInput'] == null) {
            throw new runtime.RequiredError(
                'fldtkepInput',
                'Required parameter "fldtkepInput" was null or undefined when calling updatePicture().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apikulcs"] = await this.configuration.apiKey("apikulcs"); // ApiKulcsAuth authentication
        }

        const response = await this.request({
            path: `/fldtkep/{fldtkep_id}`.replace(`{${"fldtkep_id"}}`, encodeURIComponent(String(requestParameters['fldtkepId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FldtkepInputToJSON(requestParameters['fldtkepInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FldtkepFromJSON(jsonValue));
    }

    /**
     * Egy meglévő kép adatainak frissítése base64 formátumban.
     * Adott kép frissítése ID alapján
     */
    async updatePicture(requestParameters: UpdatePictureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Fldtkep> {
        const response = await this.updatePictureRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
