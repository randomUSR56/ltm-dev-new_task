/* tslint:disable */
/* eslint-disable */
/**
 * Bcknddm API
 * API a bcknddm adatbázis tábláinak kezeléséhez. Generálva a backnddbcreate.sql alapján.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: luczialex@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Fldtmegoldas,
  FldtmegoldasInput,
} from '../models/index';
import {
    FldtmegoldasFromJSON,
    FldtmegoldasToJSON,
    FldtmegoldasInputFromJSON,
    FldtmegoldasInputToJSON,
} from '../models/index';

export interface CreateSolutionRequest {
    fldtmegoldasInput: FldtmegoldasInput;
}

export interface DeleteSolutionRequest {
    fldtmgldsId: number;
}

export interface GetSolutionByIdRequest {
    fldtmgldsId: number;
}

export interface UpdateSolutionRequest {
    fldtmgldsId: number;
    fldtmegoldasInput: FldtmegoldasInput;
}

/**
 * 
 */
export class MegoldsApi extends runtime.BaseAPI {

    /**
     * Létrehoz egy új feladat megoldást a megadott adatokkal.
     * Új feladatmegoldás létrehozása
     */
    async createSolutionRaw(requestParameters: CreateSolutionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Fldtmegoldas>> {
        if (requestParameters['fldtmegoldasInput'] == null) {
            throw new runtime.RequiredError(
                'fldtmegoldasInput',
                'Required parameter "fldtmegoldasInput" was null or undefined when calling createSolution().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apikulcs"] = await this.configuration.apiKey("apikulcs"); // ApiKulcsAuth authentication
        }

        const response = await this.request({
            path: `/fldtmegoldas`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FldtmegoldasInputToJSON(requestParameters['fldtmegoldasInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FldtmegoldasFromJSON(jsonValue));
    }

    /**
     * Létrehoz egy új feladat megoldást a megadott adatokkal.
     * Új feladatmegoldás létrehozása
     */
    async createSolution(requestParameters: CreateSolutionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Fldtmegoldas> {
        const response = await this.createSolutionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Egy feladatmegoldás törlése az adatbázisból az azonosító alapján.
     * Adott megoldás törlése ID alapján
     */
    async deleteSolutionRaw(requestParameters: DeleteSolutionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['fldtmgldsId'] == null) {
            throw new runtime.RequiredError(
                'fldtmgldsId',
                'Required parameter "fldtmgldsId" was null or undefined when calling deleteSolution().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apikulcs"] = await this.configuration.apiKey("apikulcs"); // ApiKulcsAuth authentication
        }

        const response = await this.request({
            path: `/fldtmegoldas/{fldtmglds_id}`.replace(`{${"fldtmglds_id"}}`, encodeURIComponent(String(requestParameters['fldtmgldsId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Egy feladatmegoldás törlése az adatbázisból az azonosító alapján.
     * Adott megoldás törlése ID alapján
     */
    async deleteSolution(requestParameters: DeleteSolutionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSolutionRaw(requestParameters, initOverrides);
    }

    /**
     * Egy adott azonosítójú feladatmegoldás részletes adatainak lekérdezése.
     * Adott megoldás lekérdezése ID alapján
     */
    async getSolutionByIdRaw(requestParameters: GetSolutionByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Fldtmegoldas>> {
        if (requestParameters['fldtmgldsId'] == null) {
            throw new runtime.RequiredError(
                'fldtmgldsId',
                'Required parameter "fldtmgldsId" was null or undefined when calling getSolutionById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apikulcs"] = await this.configuration.apiKey("apikulcs"); // ApiKulcsAuth authentication
        }

        const response = await this.request({
            path: `/fldtmegoldas/{fldtmglds_id}`.replace(`{${"fldtmglds_id"}}`, encodeURIComponent(String(requestParameters['fldtmgldsId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FldtmegoldasFromJSON(jsonValue));
    }

    /**
     * Egy adott azonosítójú feladatmegoldás részletes adatainak lekérdezése.
     * Adott megoldás lekérdezése ID alapján
     */
    async getSolutionById(requestParameters: GetSolutionByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Fldtmegoldas> {
        const response = await this.getSolutionByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lekérdezi az összes feladathoz tartozó megoldást az adatbázisból.
     * Összes feladatmegoldás listázása
     */
    async listSolutionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Fldtmegoldas>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apikulcs"] = await this.configuration.apiKey("apikulcs"); // ApiKulcsAuth authentication
        }

        const response = await this.request({
            path: `/fldtmegoldas`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FldtmegoldasFromJSON));
    }

    /**
     * Lekérdezi az összes feladathoz tartozó megoldást az adatbázisból.
     * Összes feladatmegoldás listázása
     */
    async listSolutions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Fldtmegoldas>> {
        const response = await this.listSolutionsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Egy meglévő feladatmegoldás adatainak frissítése a megadott értékekkel.
     * Adott megoldás frissítése ID alapján
     */
    async updateSolutionRaw(requestParameters: UpdateSolutionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Fldtmegoldas>> {
        if (requestParameters['fldtmgldsId'] == null) {
            throw new runtime.RequiredError(
                'fldtmgldsId',
                'Required parameter "fldtmgldsId" was null or undefined when calling updateSolution().'
            );
        }

        if (requestParameters['fldtmegoldasInput'] == null) {
            throw new runtime.RequiredError(
                'fldtmegoldasInput',
                'Required parameter "fldtmegoldasInput" was null or undefined when calling updateSolution().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apikulcs"] = await this.configuration.apiKey("apikulcs"); // ApiKulcsAuth authentication
        }

        const response = await this.request({
            path: `/fldtmegoldas/{fldtmglds_id}`.replace(`{${"fldtmglds_id"}}`, encodeURIComponent(String(requestParameters['fldtmgldsId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FldtmegoldasInputToJSON(requestParameters['fldtmegoldasInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FldtmegoldasFromJSON(jsonValue));
    }

    /**
     * Egy meglévő feladatmegoldás adatainak frissítése a megadott értékekkel.
     * Adott megoldás frissítése ID alapján
     */
    async updateSolution(requestParameters: UpdateSolutionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Fldtmegoldas> {
        const response = await this.updateSolutionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
