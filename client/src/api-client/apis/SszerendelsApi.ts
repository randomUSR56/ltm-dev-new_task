/* tslint:disable */
/* eslint-disable */
/**
 * Bcknddm API
 * API a bcknddm adatbázis tábláinak kezeléséhez. Generálva a backnddbcreate.sql alapján.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: luczialex@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FldtFlhsznl,
  FldtFlhsznlInput,
  Fldtkp,
  FldtkpInput,
} from '../models/index';
import {
    FldtFlhsznlFromJSON,
    FldtFlhsznlToJSON,
    FldtFlhsznlInputFromJSON,
    FldtFlhsznlInputToJSON,
    FldtkpFromJSON,
    FldtkpToJSON,
    FldtkpInputFromJSON,
    FldtkpInputToJSON,
} from '../models/index';

export interface CreateTaskImageMappingRequest {
    fldtkpInput: FldtkpInput;
}

export interface CreateTaskUserMappingRequest {
    fldtFlhsznlInput: FldtFlhsznlInput;
}

export interface DeleteTaskImageMappingRequest {
    fldtkpId: number;
}

export interface DeleteTaskUserMappingRequest {
    fldtflhsznlId: number;
}

export interface GetTaskImageMappingByIdRequest {
    fldtkpId: number;
}

export interface GetTaskUserMappingByIdRequest {
    fldtflhsznlId: number;
}

export interface UpdateTaskImageMappingRequest {
    fldtkpId: number;
    fldtkpInput: FldtkpInput;
}

export interface UpdateTaskUserMappingRequest {
    fldtflhsznlId: number;
    fldtFlhsznlInput: FldtFlhsznlInput;
}

/**
 * 
 */
export class SszerendelsApi extends runtime.BaseAPI {

    /**
     * Létrehoz egy új kapcsolatot egy feladat és egy kép között az adatbázisban.
     * Új feladat-kép összerendelés létrehozása
     */
    async createTaskImageMappingRaw(requestParameters: CreateTaskImageMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Fldtkp>> {
        if (requestParameters['fldtkpInput'] == null) {
            throw new runtime.RequiredError(
                'fldtkpInput',
                'Required parameter "fldtkpInput" was null or undefined when calling createTaskImageMapping().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apikulcs"] = await this.configuration.apiKey("apikulcs"); // ApiKulcsAuth authentication
        }

        const response = await this.request({
            path: `/fldtkp`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FldtkpInputToJSON(requestParameters['fldtkpInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FldtkpFromJSON(jsonValue));
    }

    /**
     * Létrehoz egy új kapcsolatot egy feladat és egy kép között az adatbázisban.
     * Új feladat-kép összerendelés létrehozása
     */
    async createTaskImageMapping(requestParameters: CreateTaskImageMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Fldtkp> {
        const response = await this.createTaskImageMappingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Létrehoz egy új kapcsolatot egy feladat és egy felhasználó között az adatbázisban.
     * Új feladat-felhasználó összerendelés létrehozása
     */
    async createTaskUserMappingRaw(requestParameters: CreateTaskUserMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FldtFlhsznl>> {
        if (requestParameters['fldtFlhsznlInput'] == null) {
            throw new runtime.RequiredError(
                'fldtFlhsznlInput',
                'Required parameter "fldtFlhsznlInput" was null or undefined when calling createTaskUserMapping().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apikulcs"] = await this.configuration.apiKey("apikulcs"); // ApiKulcsAuth authentication
        }

        const response = await this.request({
            path: `/fldtflhsznl`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FldtFlhsznlInputToJSON(requestParameters['fldtFlhsznlInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FldtFlhsznlFromJSON(jsonValue));
    }

    /**
     * Létrehoz egy új kapcsolatot egy feladat és egy felhasználó között az adatbázisban.
     * Új feladat-felhasználó összerendelés létrehozása
     */
    async createTaskUserMapping(requestParameters: CreateTaskUserMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FldtFlhsznl> {
        const response = await this.createTaskUserMappingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Egy feladat és kép közötti összerendelés törlése az adatbázisból.
     * Adott összerendelés törlése ID alapján
     */
    async deleteTaskImageMappingRaw(requestParameters: DeleteTaskImageMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['fldtkpId'] == null) {
            throw new runtime.RequiredError(
                'fldtkpId',
                'Required parameter "fldtkpId" was null or undefined when calling deleteTaskImageMapping().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apikulcs"] = await this.configuration.apiKey("apikulcs"); // ApiKulcsAuth authentication
        }

        const response = await this.request({
            path: `/fldtkp/{fldtkp_id}`.replace(`{${"fldtkp_id"}}`, encodeURIComponent(String(requestParameters['fldtkpId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Egy feladat és kép közötti összerendelés törlése az adatbázisból.
     * Adott összerendelés törlése ID alapján
     */
    async deleteTaskImageMapping(requestParameters: DeleteTaskImageMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTaskImageMappingRaw(requestParameters, initOverrides);
    }

    /**
     * Egy feladat és felhasználó közötti kapcsolat törlése az adatbázisból.
     * Adott összerendelés törlése ID alapján
     */
    async deleteTaskUserMappingRaw(requestParameters: DeleteTaskUserMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['fldtflhsznlId'] == null) {
            throw new runtime.RequiredError(
                'fldtflhsznlId',
                'Required parameter "fldtflhsznlId" was null or undefined when calling deleteTaskUserMapping().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apikulcs"] = await this.configuration.apiKey("apikulcs"); // ApiKulcsAuth authentication
        }

        const response = await this.request({
            path: `/fldtflhsznl/{fldtflhsznl_id}`.replace(`{${"fldtflhsznl_id"}}`, encodeURIComponent(String(requestParameters['fldtflhsznlId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Egy feladat és felhasználó közötti kapcsolat törlése az adatbázisból.
     * Adott összerendelés törlése ID alapján
     */
    async deleteTaskUserMapping(requestParameters: DeleteTaskUserMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTaskUserMappingRaw(requestParameters, initOverrides);
    }

    /**
     * Egy konkrét feladat-kép összerendelés adatainak lekérdezése azonosító alapján.
     * Adott összerendelés lekérdezése ID alapján
     */
    async getTaskImageMappingByIdRaw(requestParameters: GetTaskImageMappingByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Fldtkp>> {
        if (requestParameters['fldtkpId'] == null) {
            throw new runtime.RequiredError(
                'fldtkpId',
                'Required parameter "fldtkpId" was null or undefined when calling getTaskImageMappingById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apikulcs"] = await this.configuration.apiKey("apikulcs"); // ApiKulcsAuth authentication
        }

        const response = await this.request({
            path: `/fldtkp/{fldtkp_id}`.replace(`{${"fldtkp_id"}}`, encodeURIComponent(String(requestParameters['fldtkpId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FldtkpFromJSON(jsonValue));
    }

    /**
     * Egy konkrét feladat-kép összerendelés adatainak lekérdezése azonosító alapján.
     * Adott összerendelés lekérdezése ID alapján
     */
    async getTaskImageMappingById(requestParameters: GetTaskImageMappingByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Fldtkp> {
        const response = await this.getTaskImageMappingByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Egy konkrét feladat-felhasználó összerendelés adatainak lekérdezése azonosító alapján.
     * Adott összerendelés lekérdezése ID alapján
     */
    async getTaskUserMappingByIdRaw(requestParameters: GetTaskUserMappingByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FldtFlhsznl>> {
        if (requestParameters['fldtflhsznlId'] == null) {
            throw new runtime.RequiredError(
                'fldtflhsznlId',
                'Required parameter "fldtflhsznlId" was null or undefined when calling getTaskUserMappingById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apikulcs"] = await this.configuration.apiKey("apikulcs"); // ApiKulcsAuth authentication
        }

        const response = await this.request({
            path: `/fldtflhsznl/{fldtflhsznl_id}`.replace(`{${"fldtflhsznl_id"}}`, encodeURIComponent(String(requestParameters['fldtflhsznlId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FldtFlhsznlFromJSON(jsonValue));
    }

    /**
     * Egy konkrét feladat-felhasználó összerendelés adatainak lekérdezése azonosító alapján.
     * Adott összerendelés lekérdezése ID alapján
     */
    async getTaskUserMappingById(requestParameters: GetTaskUserMappingByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FldtFlhsznl> {
        const response = await this.getTaskUserMappingByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lekérdezi az összes feladathoz tartozó kép összerendelést az adatbázisból.
     * Összes feladat-kép összerendelés listázása
     */
    async listTaskImageMappingsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Fldtkp>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apikulcs"] = await this.configuration.apiKey("apikulcs"); // ApiKulcsAuth authentication
        }

        const response = await this.request({
            path: `/fldtkp`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FldtkpFromJSON));
    }

    /**
     * Lekérdezi az összes feladathoz tartozó kép összerendelést az adatbázisból.
     * Összes feladat-kép összerendelés listázása
     */
    async listTaskImageMappings(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Fldtkp>> {
        const response = await this.listTaskImageMappingsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Lekérdezi az összes feladat-felhasználó összerendelést az adatbázisból.
     * Összes feladat-felhasználó összerendelés listázása
     */
    async listTaskUserMappingsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FldtFlhsznl>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apikulcs"] = await this.configuration.apiKey("apikulcs"); // ApiKulcsAuth authentication
        }

        const response = await this.request({
            path: `/fldtflhsznl`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FldtFlhsznlFromJSON));
    }

    /**
     * Lekérdezi az összes feladat-felhasználó összerendelést az adatbázisból.
     * Összes feladat-felhasználó összerendelés listázása
     */
    async listTaskUserMappings(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FldtFlhsznl>> {
        const response = await this.listTaskUserMappingsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Egy meglévő feladat-kép kapcsolat módosítása az adatbázisban.
     * Adott összerendelés frissítése ID alapján
     */
    async updateTaskImageMappingRaw(requestParameters: UpdateTaskImageMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Fldtkp>> {
        if (requestParameters['fldtkpId'] == null) {
            throw new runtime.RequiredError(
                'fldtkpId',
                'Required parameter "fldtkpId" was null or undefined when calling updateTaskImageMapping().'
            );
        }

        if (requestParameters['fldtkpInput'] == null) {
            throw new runtime.RequiredError(
                'fldtkpInput',
                'Required parameter "fldtkpInput" was null or undefined when calling updateTaskImageMapping().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apikulcs"] = await this.configuration.apiKey("apikulcs"); // ApiKulcsAuth authentication
        }

        const response = await this.request({
            path: `/fldtkp/{fldtkp_id}`.replace(`{${"fldtkp_id"}}`, encodeURIComponent(String(requestParameters['fldtkpId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FldtkpInputToJSON(requestParameters['fldtkpInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FldtkpFromJSON(jsonValue));
    }

    /**
     * Egy meglévő feladat-kép kapcsolat módosítása az adatbázisban.
     * Adott összerendelés frissítése ID alapján
     */
    async updateTaskImageMapping(requestParameters: UpdateTaskImageMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Fldtkp> {
        const response = await this.updateTaskImageMappingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Egy meglévő feladat-felhasználó kapcsolat módosítása az adatbázisban.
     * Adott összerendelés frissítése ID alapján
     */
    async updateTaskUserMappingRaw(requestParameters: UpdateTaskUserMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FldtFlhsznl>> {
        if (requestParameters['fldtflhsznlId'] == null) {
            throw new runtime.RequiredError(
                'fldtflhsznlId',
                'Required parameter "fldtflhsznlId" was null or undefined when calling updateTaskUserMapping().'
            );
        }

        if (requestParameters['fldtFlhsznlInput'] == null) {
            throw new runtime.RequiredError(
                'fldtFlhsznlInput',
                'Required parameter "fldtFlhsznlInput" was null or undefined when calling updateTaskUserMapping().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apikulcs"] = await this.configuration.apiKey("apikulcs"); // ApiKulcsAuth authentication
        }

        const response = await this.request({
            path: `/fldtflhsznl/{fldtflhsznl_id}`.replace(`{${"fldtflhsznl_id"}}`, encodeURIComponent(String(requestParameters['fldtflhsznlId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FldtFlhsznlInputToJSON(requestParameters['fldtFlhsznlInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FldtFlhsznlFromJSON(jsonValue));
    }

    /**
     * Egy meglévő feladat-felhasználó kapcsolat módosítása az adatbázisban.
     * Adott összerendelés frissítése ID alapján
     */
    async updateTaskUserMapping(requestParameters: UpdateTaskUserMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FldtFlhsznl> {
        const response = await this.updateTaskUserMappingRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
